// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  projects Project[]
  comments Comment[]
  ratings  Rating[]  @ignore
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id              String  @id @default(cuid())
  userId          String
  user            User    @relation(fields: [userId], references: [id])
  name            String
  description     String?
  source_code_url String
  live_demo_url   String?

  image          String?
  average_rating Float?

  ratings Rating[]

  hashtags Hashtag[]
  comments Comment[]
}

model Comment {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String

  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Rating {
  id String @id @default(cuid())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  value Int @default(0)

  @@index([projectId, userId])
}

model Hashtag {
  id String @id @default(cuid())

  name     String    @unique
  projects Project[]
}
